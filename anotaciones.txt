REACT HOOKS son una nueva característica de React que nos permite añadir
estado (con useState) y ciclos de vida (con useEffect) a nuestros
componentes funcionales, es decir, componentes creados con funciones, 
no como clases heredadas de React.Component.

También podemos crear nuestros propios Custom Hooks para reutilizar la
lógica de nuestros componentes en cualquier otra parte de la aplicación.

Gracias a React Hooks podemos crear un código más claro y simple. 
Sin embargo, no es necesario que implementemos estas funcionalidades a
nuestros proyectos ahora mismo, podemos hacer la transición a medida
que crecen nuestras aplicaciónes y entendemos mucho mejor cómo utilizar
los hooks de manera correcta.

Puedes aprender más sobre otros hooks que tenemos disponibles de manera
oficial o creados por la comunidad
en: https://reactjs.org/docs/hooks-overview.html

CREATE REACT HOOKS
Vamos a crear la carpeta src/hooks/ para guardar nuestros custom hooks.
Además. Nuestros hooks tienen 3 tareas: 
manejar el estado, 
conseguir información y 
entregarle esta información a nuestros componentes a través del estado.

Por convención, todos nuestros custom hooks deben empezar con palabra 
use y usar camelCase, por ejemplo: useDarkMode, useLocalStorage o 
useJSONAPI.

Recuerda que la función useEffect NO es un reemplazo de los ciclos de 
vida de los componentes con clases, más bien, es una nueva forma de 
trabajar en componentes funcionales.

En esta clase vamos a crear el archivo src/hooks/useGetData.js 
para traer la información de nuestro currículum desde una API.

Clase 06 - Conectar datos en la aplicación
Nuestros componentes visuales solo muestran texto de prueba, por ahora. 
Vamos a usar el custom hook que acabamos de crear, la función useGetData(),
para reemplazar la información de prueba por los datos reales que 
obtenemos de nuestra API.

Clase 07 - Pasando datos a nuestro componente Skills
En esta clase debemos hacer dos cosas: cambiar el texto temporal de los
componentes faltantes por la información real de nuestra API y construir 
el último de nuestros componentes visuales, el que se encarga de mostrar 
nuestras redes sociales (src/components/Social.jsx).

Unidad 03
Clase 01 - Estilos y animaciones con Styled Components
React nos permite estilizar nuestros componentes con estilos en línea, 
sin embargo, este método tiene algunas limitaciones: debemos usar 
camelCase en vez de la sintaxis normal con guiones (por ejemplo, 
font-size lo declaramos como fontSize), no podemos usar la propiedad 
:hover o ningún otro pseudo-selector, no podemos estilizar clases ni 
usar la herencia de componentes, no podemos definir animaciones, entre 
otras limitaciones.

Afortunadamente, herramientas como styled-components nos ayudan a crear 
nuestros estilos en componentes de React con JavaScript sin perder las 
características de CSS, de hecho, conseguimos algunos beneficios extra 
al juntar ambos lenguajes: CSS y JavaScript.

Instalación de styled-components: npm install styled-components --save

Más información sobre styled-components en: 
https://www.styled-components.com

Clase 02 - Terminando los estilos del componente About
Una de las características de styled-components es que podemos definir 
los estilos de nuestros elementos sin preocuparnos por los nombres de 
las clases, styled-components lo hace por nosotros, además, se encarga 
de que nunca se repitan clases entre componentes diferentes, así nos 
aseguramos de que nuestros estilos se aplican sólo a los elementos que 
nosotros necesitamos y no tenemos errores de estilos en nuestra 
aplicación.

Puedes buscar tus fuentes favoritas en: https://fonts.google.com

Clase 03 - Agregando Custom Styles
Vamos a crear una nueva carpeta, src/styles/, donde vamos a crear algunos
componentes reutilizables con estilos personalizados que podemos utilizar 
por toda nuestra aplicación. Esta es una alternativa a los estilos 
globales que vamos a utilizar más adelante.

Clase 04 - Temas y estilos variables con Styled Components
Vamos a añadir algunos iconos a nuestra aplicación, debemos añadir esta 
etiqueta <link> dentro del <head> de nuestro archivo public/index.html:

<link rel=""stylesheet"" 
href=""https://use.fontawesome.com/releases/v5.7.2/css/all.css"" 
integrity=""sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr"" 
crossorigin=""anonymous"">

Con styled-components podemos acceder a las propiedades de cada componente
para modificar sus estilos con CSS:

const IconSocial = styled.i`
color: ${props => props.theme.color};
`

Más información sobre Font Awesome en: https://fontawesome.com
Otra forma de añadir iconos de Font Awesome a nuestras aplicaciónes con 
React: https://fontawesome.com/how-to-…/on-the-web/using-with/react
Crea una galería de fuentes a partir de iconos con 
IcoMoon: https://youtu.be/_5r4PFi8gDc

Clase 05 - Creando las barras de progreso
Vamos a construir algunos componentes para mostrar nuestra experiencia 
con las mejores tecnologías de desarrollo.

Uno de estos componentes va a tener dos líneas: una para mostrar el 
porcentaje de conocimiento (por ejemplo 80%) y otra para mostrar el 
espacio total de nuestro componente (100%).

Clase 06 - Animaciones con Styled Components
Styled Components también nos permite crear animaciones de css con 
keyframes, solo debemos importar la función keyframes de 
styled-components, crear una variable con las animaciones y añadirlas 
a los estilos de nuestros componentes creados con la función styled en
la propiedad animation:

import { keyframes } from 'styled-components';

const move = keyframes`
from { ... }
to { ... }
`;

const MyComponent = styled.tag`
animation: ${move} ... ...;
`;

Clase 07 - Estilos globales
Styled Components también nos permite crear estilos globales, es decir, 
estilos para las etiquetas generales (por ejemplo, html, body o main) o 
estilos reutilizables a partir de clases (por ejemplo, .d-none para 
ocultar componentes o .t-red para definir textos con mensajes importantes)

Para esto debemos importar la función createGlobalStyle de 
styled-components, crear un componente con los estilos globales e incluir
este componente en nuestra aplicación:

import { createGlobalStyle } from 'styled-components';

const GlobalStyle = createGlobalStyle`
body { ... }
`;

const App = () => {
return (
...
<GlobalStyle />
...
);
}

Clase 08 - Haciendo nuestro portafolio responsivo
Styled Components también nos permite añadir media queries a nuestros 
componentes, ni siquiera debemos importar una función especial del 
paquete de styled-components, solo debemos escribirlas común y corriente 
con el resto de estilos de cada componente:

const MyComponent = styled.tag`
@media screen and (...) {
...
}
`;


Clase 01 - Optimización para SEO
Buenas prácticas de SEO para nuestras aplicaciones:

- Especificar el idioma de nuestra aplicación con el atributo lang="""" 
de nuestra etiqueta <head> en el archivo public/index.html
- Crear una meta-etiqueta para soportar caracteres especiales del 
español: <meta charset=""utf-8"" />
- Crear otra meta-etiqueta para soportar la versión responsive de nuestra 
aplicación: <meta name=""viewport"" content=""width=device-width, 
initial-scale=1"" />
- Especificar la URL canónica para evitar contenido duplicado en los 
buscadores (podemos usar el paquete favicons-webpack-plugin para 
facilitar este proceso): <link rel=""canonical"" href=""url"" />
- Añadir nuestro nombre como autores de la aplicación: 
<meta name=""author"" content=""tu nombre"" />
- Crear un archivo manifest.json donde podemos especificar algunas 
propiedades de nuestro proyecto para los navegadores: 
<link rel=""manifest"" href=""assets/manifest.json"" />
- Añadir una descripción para nuestro proyecto: 
<meta name=""description"" content=""tu descripción o biografía"" />
- Añadir algunas palabras clave: <meta name=""keywords"" 
content=""nombre, apellido, tecnologías, entre otras"" />

UNIT 4
Clase 01 - Optimización para SEO
Buenas prácticas de SEO para nuestras aplicaciones:

- Especificar el idioma de nuestra aplicación con el atributo lang="""" de nuestra etiqueta <head> en el archivo public/index.html

- Crear una meta-etiqueta para soportar caracteres especiales del español: <meta charset=""utf-8"" />

- Crear otra meta-etiqueta para soportar la versión responsive de nuestra aplicación: <meta name=""viewport"" content=""width=device-width, initial-scale=1"" />

- Especificar la URL canónica para evitar contenido duplicado en los buscadores (podemos usar el paquete favicons-webpack-plugin para facilitar este proceso): <link rel=""canonical"" href=""url"" />

- Añadir nuestro nombre como autores de la aplicación: <meta name=""author"" content=""tu nombre"" />

- Crear un archivo manifest.json donde podemos especificar algunas propiedades de nuestro proyecto para los navegadores: <link rel=""manifest"" href=""assets/manifest.json"" />

- Añadir una descripción para nuestro proyecto: <meta name=""description"" content=""tu descripción o biografía"" />

- Añadir algunas palabras clave: <meta name=""keywords"" content=""nombre, apellido, tecnologías, entre otras"" />